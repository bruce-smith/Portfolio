@model Portfolio.Models.ContactViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

<
<link href="~/Content/css/freelancer.min.css" rel="stylesheet">
<script src="https://www.google.com/recaptcha/api.js" async defer></script> @*need for captcha*@


<div id="ContactForum">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Message, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
                </div>
            </div>
            @*start captcha code*@
            <div class="g-recaptcha" data-sitekey=@ViewBag.captchaSiteKey></div>
            @Html.Raw(ViewBag.test);
            @*end captcha code*@

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input id="ContactSubmitButton" type="submit" value="Send" class="btn btn-primary btn-xl" />
                </div>
            </div>
        </div>
    }
</div>
<div id="LoadingPlaceHolder" style="visibility: hidden;">
    <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<script>
    //TODO Bruce Smith if the user inputs a bad email the loading screen will stay open forever
    function myFunction() {
        let button = document.getElementById("ContactSubmitButton");
        let theForum = document.getElementById("ContactForum");
        let LoadingPlaceHolder = document.getElementById("LoadingPlaceHolder");
        theForum.style.visibility = "hidden";
        LoadingPlaceHolder.style.visibility = "visible";
    }


    document.getElementById("ContactSubmitButton").onclick = function () { myFunction() };




</script>